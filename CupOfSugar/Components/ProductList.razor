@using CupOfSugar.WebSite.Models
@using CupOfSugar.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@inject JsonFileProductService ProductService

@inject NavigationManager NavManager


<!--Filter-->
<div class="row">
    <div class="row">
        <div class="col">
            <input id="filter-input" type="text" @onchange="(e) => UpdateFilterText(e.Value.ToString())" value="@FilterDataString" />
            <button @onclick="(e => EnableFilterData())" class="btn btn-success">Filter</button>
            <button @onclick="(e => ClearFilterData())" class="btn btn-danger">Clear</button>
        </div>
    </div>
    <!--drop down menu for food category types-->
    <div class="row">
        <label class="col-sm-3 col-form-label" for="category"></label>
        <select @onchange="(e) => UpdateFilterCategory(e.Value.ToString())" class="form-select col-sm-9 form-control" id="inputGroupSelect02">
            <option selected>All</option>
            @foreach (ProductTypeEnum category in Enum.GetValues(typeof(ProductTypeEnum)))
            {
                <option value=@category>@ProductTypeEnumExtensions.DisplayName(category)</option>
            }
        </select>
    </div>

    <!--checkbox which enables the users to filter the products by availability-->
    <div class="row" id="availability-filter">
        <div class="col">
            <input type="checkbox" id="availability" name="availability" value="available" @onchange="(e) => EnableAvailabilityFilter()">
            <label for="vehicle1" id="availability-label"> Items available</label>
        </div>
    </div>
</div>

<div class="container-fluid">
    @{
        var productList = ProductService.GetProducts();

        /*

            Change the grouping sort order to be
            Order by ProductType
            Then order by ProductList Alphabetic within the Product data set

        */

        //flag for checking if the filters applied render any products
        var productPresent = 0;

        // Group by the Enum
        foreach (ProductTypeEnum productType in Enum.GetValues(typeof(ProductTypeEnum)))
        {
            // Get only the products that are of this enum type
            var productListGroup = productList.Where(m => m.Category == productType.ToString());



            // Order the list alphabetical
            productListGroup = productListGroup.OrderBy(m => m.Title);

            // If filter is enabled, reduce the data set to the filter string
            if (FilterData)
            {
                productListGroup = productListGroup.Where(m => m.Title.ToLower().Contains(FilterDataString.ToLower()));
            }

            //If the availability checkbox is checked, the dataset is reduced according the status of the product
            if (FilterAvailability)
            {
                productListGroup = productListGroup.Where(m => m.Status.ToLower().Equals("available"));
            }

            // filter by category
            if (!String.IsNullOrEmpty(selectedCategory))
            {
                // If the selected category is not "All", then get products of the selected category, else productListGroup will
                // be all products
                if (!selectedCategory.Equals("All"))
                {
                    productListGroup = productListGroup.Where(m => m.Category.ToLower().Contains(selectedCategory.ToLower()));
                }
            }

            if (productListGroup.Any())
            {
                productPresent = 1;
                <hr />
                <h2>@productType.DisplayName()</h2>

                <div class="row">
                    <div class="card-columns">
                        @foreach (var product in productListGroup)
                        {
                            <div class="card">
                                <img class="card-img" src="@product.Image" onerror="this.onerror=null;this.src='../images/default-@product.Category.ToLower()\.png'" />
                                <div class="card-body">
                                    <h5 class="card-title">@product.Title</h5>
                                </div>
                                <div class="card-footer">
                                    <small class="text-muted">
                                        <button @onclick="(e => MovetoRead(product.Id))" id="MoreInfoButton_@product.Id" class="btn btn-primary">More Info</button>
                                    </small>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        }

        // Checking if the filter applied rendered any products
        if (productPresent == 0)
        {
            <br />
            <br />
            <h4>
                Sorry! Could not find any items matching your search.
            </h4>
        }
    }
</div>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@code
{
    // Selected category
    string selectedCategory;

    // Filter string
    string FilterDataString = "";

    // Filtering state
    bool FilterData = false;

    // Variable to enable filtering based on availability
    bool FilterAvailability = false;

    /// <summary>
    /// Changes filter string to user input
    /// </summary>
    /// <param name="text"></param>
    void UpdateFilterText(string text)
    {
        FilterDataString = text;
    }

    /// <summary>
    /// Changes category filter string to user selected option
    /// </summary>
    /// <param name="category"></param>
    void UpdateFilterCategory(string category)
    {
        selectedCategory = category;
        Console.Write(selectedCategory);
    }

    /// <summary>
    /// Enables filtering by setting FilterData to true
    /// </summary>
    void EnableFilterData()
    {
        // If the Filter is enabled, set the filter flag
        FilterData = true;

    }

    /// <summary>
    /// Enables or disables the FilterAvailability flag depending on the checkbox action
    /// </summary>
    void EnableAvailabilityFilter()
    {
        //If the checkbox is unchecked, set the value of the flag to false
        if (FilterAvailability == true)
        {
            FilterAvailability = false;
        }
        else
        {
            FilterAvailability = true;
        }
        // If the Filter is enabled, set the filter flag
    }


    /// <summary>
    /// Disables filtering and sets filter string to an
    /// empty string
    /// </summary>
    void ClearFilterData()
    {
        // If the Filter is enabled, set the filter flag
        FilterData = false;
        FilterDataString = "";
    }


    /// <summary>
    /// Routes to read page when More Info button
    /// is clicked
    /// </summary>
    /// <param name="id"></param>
    void MovetoRead(string id)
    {
        NavManager.NavigateTo("../Product/Read/" + id, true);
    }
}
