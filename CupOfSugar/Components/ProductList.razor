@using CupOfSugar.WebSite.Models

@using Microsoft.AspNetCore.Mvc
@using CupOfSugar.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@inject JsonFileProductService ProductService

@inject NavigationManager NavManager

<!--Page title-->
<div class="text-center">
    <h1 class="display-4 borrow-title">Yummy Borrows</h1>
</div>

<!--Filter-->
<div>
    <div class="row">
        <div class="col">
            <input type="text" @onchange="(e) => UpdateFilterText(e.Value.ToString())" value="@FilterDataString" />
            <button @onclick="(e => EnableFilterData())" class="btn btn-success">Filter</button>
            <button @onclick="(e => ClearFilterData())" class="btn btn-danger">Clear</button>
        </div>
    </div>

</div>

<div class="container-fluid">
    @{
        var productList = ProductService.GetProducts();

        /*

            Change the grouping sort order to be
            Order by ProductType
            Then order by ProductList Alphabetic within the Product data set

        */

        // Group by the Enum
        foreach (ProductTypeEnum productType in Enum.GetValues(typeof(ProductTypeEnum)))
        {
            // Get only the products that are of this enum type
            var productListGroup = productList.Where(m => m.Category == productType.ToString());

            // Order the list alphabetical
            productListGroup = productListGroup.OrderBy(m => m.Title);

            // If filter is enabled, reduce the data set to the filter string
            if (FilterData)
            {
                productListGroup = productListGroup.Where(m => m.Title.ToLower().Contains(FilterDataString.ToLower()));
            }

            if (productListGroup.Any())
            {

                <hr />
                <h2>@productType.DisplayName()</h2>

                <div class="row">
                    <div class="card-columns">
                        @foreach (var product in productListGroup)
                        {
                            <div class="card">
                                <div class="card-img" style="background-image: url('@product.Image');">
                                </div>
                                <div class="card-body">
                                    <h5 class="card-title">@product.Title</h5>
                                </div>
                                <div class="card-footer">
                                    <small class="text-muted">
                                        <button @onclick="(e => MovetoRead(product.Id))" id="MoreInfoButton_@product.Id"  class="btn btn-primary">More Info</button>
                                    </small>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        }
    }
</div>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@code
{
    Product selectedProduct;
    string selectedProductId;

    void SelectProduct(string productId)
    {
        selectedProductId = productId;
        selectedProduct = ProductService.GetProducts().First(x => x.Id == productId);
    }

    string FilterDataString = "";
    bool FilterData = false;

    void UpdateFilterText(string text)
    {
        FilterDataString = text;
    }

    void EnableFilterData()
    {
        // If the Filter is enabled, set the filter flag
        FilterData = true;
    }

    void ClearFilterData()
    {
        // If the Filter is enabled, set the filter flag
        FilterData = false;
        FilterDataString = "";
    }

    void MovetoRead(string id)
    {
        NavManager.NavigateTo("../Product/Read/" + id, true);
    }
}